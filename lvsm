#!/usr/bin/env python
#
# lvsm - LVS Manager
# Khosrow Ebrahimpour - Sep 2012
# this program is a wrapper aiming to unify the task of managing an Linux Server running LVS

"""LVS Manager is a shell that simplifies management of a linux virtual server (LVS).
    Using it without arguments will enter an interactive shell.
    Supplying one or more command-line arguments will run lvsm for a "single-shot" use.
    
Usage: lvsm [-h] [-c <conffile>][commands]

Options:
  -h, --help            show this help message and exit
  
  -c <conffile>         specify which configuration file to use
  -config=<connfile>

Commands:
  configure
  status
  help
  
Use 'lvsm help <command>' for information on a specific command.
"""
import getopt
import sys
import cmd
import subprocess

DEBUG = False
config = dict()

class CommandPrompt(cmd.Cmd):
    def help_help(self):
        print
        print "show help"
        
    def do_exit(self,line):
        """exit from lvsm shell"""
        print "goodbye."
        sys.exit(0)

    def do_quit(self,line):
        """exit from lvsm shell"""
        print "goodbye."
        sys.exit(0)
        
    def do_end(self,line):
        """return to previous context"""
        print 
        return True
        
    def do_EOF(self,line):
        print
        return True

class ConfigurePrompt(CommandPrompt):
    prompt = "lvsm(configure)# "    
    modules = ['director', 'firewall']
    
    def show_config(self, configkey):
        """prints out the specified configuration file"""
        global config
        lines = list()
        try:
            file = open(config[configkey])
            lines = file.readlines()
            file.close()
        except IOError as e:
            print "[ERROR] Unable to read '" + e.filename  + "'"
            print "[ERROR] " + e.strerror
        for line in lines:
            print line.rstrip()
    
    def complete_show(self, text, line, begidx, endidx):
        """Tab completion for the show command"""
        if not text:
            completions = self.modules[:]
        else:
            completions = [m for m in self.modules if m.startswith(text)]
        return completions

    def do_show(self, line):
        """Show configuration for an item. The configuration files are defined in lvsm.conf

syntax: show <module>
<module> can be one of the following
        director                the IPVS director config file
        firewall                the iptables firewall config file"""
        global config        
        if line == "director":
            self.show_config("director_config")
        elif line == "fw":
            self.show_config("firewall_config")
        else:
            print self.do_show.__doc__

    def complete_edit(self, text, line, begidx, endidx):
        """Tab completion for the show command"""
        if not text:
            completions = self.modules[:]
        else:
            completions = [m for m in self.modules if m.startswith(text)]
        return completions

            
    def do_edit(self,line):
        """Edit the configuration of an item. The configuration files are defined in lvsm.conf

edit <module>
<module> can be one of the follwoing
        director                the IPVS director config file
        firewall                the iptables firewall config file"""
        global config
        if line == "director" or line == "firewall":
            print "Not implemented yet!"
        else:
            print self.do_edit.__doc__
        
    def do_sync(self,line):
        """Sync all configuration files across the cluster."""
        global config
        if line:
            print self.do_sync.__doc__
        else:
            if config['dsh_group']:
                log("dsh -g " + config['dsh_group'])
                cluster_command = ['dsh', '-g', config['dsh_group']]
            else:
                log("no dsh defined")
                cluster_command = []    
            # update director config
            if config['director_config']:
                args = ['svn', 'commit', config['director_config']]
                execute(args, "problem with configuration sync")
                args = cluster_command + ['svn', 'update', config['director_config']]
                execute(args, "problem with configuration sync")
            # update firewall config
            if config['firewall_config']:
                args = ['svn', 'commit', config['firewall_config']]
                execute(args, "problem with configuration sync")
                args = cluster_command + ['svn', 'update', config['firewall_config']]
                execute(args, "problem with configuration sync")
                
class StatusPrompt(CommandPrompt):
    prompt = "lvsm(status)# "
    modules = ['director', 'firewall', 'virtual']

    def complete_show(self, text, line, begidx, endidx):
        """Tab completion for the show command""" 
        protocols = ['tcp', 'udp', 'fwm']
        if line.startswith("show virtual ") and len(line) < 16:
            if line == "show virtual ":
                completions = protocols[:]
            else:
                completions = [p for p in protocols if p.startswith(text)] 
        elif not text:
            completions = self.modules[:]
        else:
            completions = [m for m in self.modules if m.startswith(text)] 
        return completions

    
    def do_show(self, line):
        """Show information about a specific item.
        
syntax: show <module>
<module> can be one of the following
        director                the running ipvs status
        firewall                the iptables firewall status
        virtual <vip> <port>    the status of a specific VIP"""
        commands = line.split()
        if line == "director":
            args = ['/sbin/ipvsadm', '--list']
            execute(args, "problem with ipvsadm")
        elif line == "firewall":
            args = ['/sbin/iptables', '-L', '-v']
            execute(args, "problem with iptables")
        elif len(commands) > 0 and commands[0] == "virtual":
            if len(commands) == 3:
                vip = commands[1]
                try:
                    port = int(commands[2])
                    args = ['/sbin/ipvsadm', '--list', '-t', vip + ":" + str(port)]
                    execute(args, "problem with ipvsadm")
                except ValueError as e:
                    print "[ERROR] port number must be an integer"
            elif len(commands):
                print self.do_show.__doc__    
        else:
            print self.do_show.__doc__
 

class MainPrompt(CommandPrompt):
    prompt = "lvsm# "
            
    def do_configure(self,line):
        """The configuration level

Items related to configuration of IPVS and iptables are available here."""
        commands = line.split()
        if not line:
            ConfigurePrompt().cmdloop()
        else:
            ConfigurePrompt().onecmd(' '.join(commands[0:]))
        
    def do_status(self, line):
        """The status level.

Running status of IPVS and iptables are available here."""
        commands = line.split()
        if not line:
            StatusPrompt().cmdloop()
        else:
            StatusPrompt().onecmd(' '.join(commands[0:]))

def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print >> fd, __doc__
    if msg:
        print >> fd, msg
    sys.exit(code)

def log(msg):
    if DEBUG:
        print "[DEBUG] " + msg

def execute(args, error):
    try:
        log(str(args))
        process = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE)
        stdout, stderr = process.communicate()
        if stdout:
            print stdout
        else:
            print stderr
    except OSError as e:
        print "[ERROR] " + error + " - " + e.strerror

def parse_config(filename):
    #open config file and read it
    try:
        file = open(filename)
        lines = file.readlines()
        file.close()
    except IOError as e:
        print "[ERROR] Unable to read configuration file:" 
        print "[ERROR] " + e.strerror + " '" + filename + "'"
        sys.exit(1)  
    # list of valid config keys
    config_items = {
                   'director_config':'',
                   'firewall_config':'',
                   'dsh_group':''
                   }
    linenum = 0
    for line in lines:
        linenum += 1
        if line[0] == '#':
            continue
        key,sep,value = line.rstrip().partition('=')
        if config_items.get(key.lstrip().rstrip()) is None:
            print "[ERROR] configuration file line " + str(linenum) + ": invalid variable '" + key.lstrip().rstrip() + "'"
            sys.exit(1)
        else:
            config_items[key.lstrip().rstrip()] = value.lstrip().rstrip()
            # verify that the file exists
            try:
                file = open(value.lstrip().rstrip())
                file.close()
            except IOError as e:
                print "[ERROR] in lvsm configuration file line " + str(linenum)  
                print "[ERROR] " + e.strerror + ": '" + e.filename + "'"
                sys.exit(1)        
    return config_items        
    
def main():
    global DEBUG
    CONFFILE = "/opt/lvsm/lvsm.conf"
    global config 
            
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:d", ["help", "config=", "debug"])
    except getopt.error, msg:
        usage(2, msg)
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage(0)
        elif opt in ("-c", "--config"):
            CONFFILE = arg
        elif opt in ("-d", "--debug"):
            DEBUG = True
            
    #open config file and read it
    config = parse_config(CONFFILE)
    log("Parsed config file")
    log(str(config))

    if args:
        MainPrompt().onecmd(' '.join(sys.argv[1:]))
    else:
        MainPrompt().cmdloop()
                
if __name__ == "__main__":
    main()  
